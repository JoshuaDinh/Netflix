{"version":3,"sources":["axios.js","components/Trailer/Trailer.js","components/Row/Row.js","requests.js","components/Banner/Banner.js","components/Navigation/Navigation.js","App.js","index.js"],"names":["instance","axios","create","baseURL","Trailer","playTrailer","videoSrc","id","videoId","title","src","Row","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","selectedTrailer","setSelectedTrailer","useEffect","a","get","request","data","results","fetchData","params","part","type","maxResults","key","process","q","response","items","findTrailer","renderPosters","map","movie","poster_path","backdrop_path","alt","name","onClick","handleClick","className","API_KEY2","requests","fetchTrending","fetchNetflixOriginals","fetchAction","fetchComedy","fetchHorror","fetchRomance","fetchDocumentaries","Banner","setMovie","Math","floor","random","length","style","backgroundImage","original_name","overview","Navigation","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8fb13715.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: \"https://api.themovied.org/3\",\n});\n\nexport default instance;\n","import React from \"react\";\nimport \"./trailer.css\";\n\nconst Trailer = ({ playTrailer }) => {\n  if (!playTrailer) {\n    return <div>Loading ...</div>;\n  }\n  const videoSrc = `https://www.youtube.com/embed/${playTrailer.id.videoId}`;\n\n  return <iframe title=\"videoPlayer\" src={videoSrc} />;\n};\n\nexport default Trailer;\n","import React, { useState, useEffect } from \"react\";\nimport instance from \"../../axios\";\nimport axios from \"axios\";\nimport \"./row.css\";\nimport Trailer from \"../Trailer/Trailer\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\nconst API_KEY = process.env.REACT_APP_MOVIE_API_KEY;\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  const [selectedTrailer, setSelectedTrailer] = useState(\"\");\n\n  // api call gets list of movies/shows to display on rows\n  useEffect(() => {\n    async function fetchData() {\n      const request = await instance.get(fetchUrl);\n      setMovies(request.data.results);\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  // when user clicks on image sets the selected videos name as state to search the  youtube api\n\n  const handleClick = (movie) => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else setTrailerUrl(movie.name || movie.title);\n  };\n\n  // gets the selected videos name and searchs for trailer on youtube/ logs state to be sent to Trailer.js for rendering\n  useEffect(() => {\n    if (trailerUrl) {\n      const findTrailer = async () => {\n        const response = await axios.get(\n          \"https://www.googleapis.com/youtube/v3/search\",\n          {\n            params: {\n              part: \"snippet\",\n              type: \"video\",\n              maxResults: 1,\n              key: API_KEY,\n              q: `${trailerUrl} new season trailer`,\n            },\n          }\n        );\n        setSelectedTrailer(response.data.items[0]);\n      };\n      findTrailer();\n    }\n  }, [trailerUrl]);\n\n  // loops through the list of movies to display / handle click selects/updates state to search for trailer\n  const renderPosters = movies.map((movie) => {\n    return (\n      <img\n        key={movie.id}\n        src={`${base_url}${\n          // determines what size poster to display netflix originals has larger image\n          isLargeRow ? movie.poster_path : movie.backdrop_path\n        }`}\n        alt={movie.name}\n        onClick={() => handleClick(movie)}\n      />\n    );\n  });\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className={`row__posters ${isLargeRow && \"row__posterLarge\"}`}>\n        {renderPosters}\n      </div>\n      {/* determines whether or not to display trailer */}\n      {trailerUrl && <Trailer playTrailer={selectedTrailer} />}\n    </div>\n  );\n}\n\nexport default Row;\n","const API_KEY2 = process.env.REACT_APP_MOVIE_T_API_KEY;\n\nconst requests = {\n  fetchTrending: `https://api.themoviedb.org/3/trending/movie/week?api_key=${API_KEY2}&with_networks=213`,\n  fetchNetflixOriginals: `https://api.themoviedb.org/3/discover/tv?api_key=${API_KEY2}&language=en-US&sort_by=popularity.desc&page=1&timezone=America%2FNew_York&with_networks=213&include_null_first_air_dates=false`,\n  fetchAction: `https://api.themoviedb.org/3/discover/tv?api_key=${API_KEY2}&language=en-US&sort_by=popularity.desc&certification_country=US&include_adult=false&include_video=false&page=1&with_genres=28    `,\n  fetchComedy: `https://api.themoviedb.org/3/discover/tv?api_key=${API_KEY2}&language=en-US&sort_by=popularity.desc&certification_country=US&include_adult=false&include_video=false&page=1&with_genres=35`,\n  fetchHorror: `https://api.themoviedb.org/3/discover/tv?api_key=${API_KEY2}&language=en-US&sort_by=popularity.desc&certification_country=US&include_adult=false&include_video=false&page=1&with_genres=27`,\n  fetchRomance: `https://api.themoviedb.org/3/discover/tv?api_key=${API_KEY2}&language=en-US&sort_by=popularity.desc&certification_country=US&include_adult=false&include_video=false&page=1&with_genres=10749`,\n  fetchDocumentaries: `https://api.themoviedb.org/3/discover/tv?api_key=${API_KEY2}&language=en-US&sort_by=popularity.desc&certification_country=US&include_adult=false&include_video=false&page=1&with_genres=99    `,\n};\nexport default requests;\n","import React, { useState, useEffect } from \"react\";\nimport instance from \"../../axios\";\nimport requests from \"../../requests\";\nimport \"./banner.css\";\n\nfunction Banner() {\n  const [movie, setMovie] = useState([]);\n\n  // fetchs specific list of videos and randomly selects a video to display at top of app\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await instance.get(requests.fetchNetflixOriginals);\n      setMovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length)\n        ]\n      );\n      return request;\n    }\n    fetchData();\n  }, []);\n\n  return (\n    <div\n      className=\"banner\"\n      style={{\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n      }}\n    >\n      <div className=\"banner__content\">\n        <h1>{movie?.title || movie?.name || movie?.original_name}</h1>\n        <div className=\"banner__button\">\n          <button>Play Trailer</button>\n          <button>My List</button>\n        </div>\n        <h6>{movie.overview}</h6>\n      </div>\n      <div className=\"fadeBottom\"></div>\n    </div>\n  );\n}\n\nexport default Banner;\n","import React, { useState, useEffect } from \"react\";\nimport \"./navigation.css\";\n\nfunction Navigation() {\n  const [show, handleShow] = useState(false);\n\n  // transitions sticky navbar to show when scrolled down\n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      if (window.scrollY > 100) {\n        handleShow(true);\n      } else handleShow(false);\n    });\n    return () => {\n      window.removeEventListener(\"scroll\");\n    };\n  }, []);\n\n  return (\n    <nav className={show && \"nav__black\"}>\n      <img\n        src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\n        alt=\"netflix logo\"\n      />\n      {show && <p>Hold shift + scroll to view more</p>}\n      <img\n        src=\"https://learning.royalbcmuseum.bc.ca/wp-content/uploads/2014/07/netflix-face.jpg\"\n        alt=\"netflix logo\"\n      />\n    </nav>\n  );\n}\n\nexport default Navigation;\n","import React from \"react\";\nimport \"./App.css\";\nimport Row from \"./components/Row/Row\";\nimport requests from \"./requests\";\nimport Banner from \"./components/Banner/Banner\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\">\n          <div className=\"App\">\n            <Navigation />\n            <Banner />\n            <Row\n              isLargeRow\n              title=\"NETFLIX ORIGINALS\"\n              fetchUrl={requests.fetchNetflixOriginals}\n            />\n            <Row title=\"Trending\" fetchUrl={requests.fetchTrending} />\n            {/* <Row title=\"Action\" fetchUrl={requests.fetchAction} /> */}\n            <Row title=\"Comedy\" fetchUrl={requests.fetchComedy} />\n            {/* <Row title=\"Horror\" fetchUrl={requests.fetchHorror} /> */}\n            <Row title=\"Romance\" fetchUrl={requests.fetchRomance} />\n            <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n          </div>\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}